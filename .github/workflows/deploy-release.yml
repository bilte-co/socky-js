name: Build & Deploy CDN Release

on:
  push:
    tags:
      - "v*"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build & Deploy CDN Assets
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build project for CDN
        run: |
          mkdir -p dist
          bun run build

      - name: Copy build to versioned structure for jsDelivr
        run: |
          mkdir -p cdn/v${{ steps.version.outputs.VERSION }}
          mkdir -p cdn/latest

          # Copy files to versioned directory
          cp dist/socky.min.js cdn/v${{ steps.version.outputs.VERSION }}/
          cp dist/socky.min.js.map cdn/v${{ steps.version.outputs.VERSION }}/
          cp dist/socky.js cdn/v${{ steps.version.outputs.VERSION }}/
          cp dist/socky.js.map cdn/v${{ steps.version.outputs.VERSION }}/
          cp dist/socky.esm.js cdn/v${{ steps.version.outputs.VERSION }}/
          cp dist/socky.esm.js.map cdn/v${{ steps.version.outputs.VERSION }}/

          # Copy files to latest directory
          cp dist/socky.min.js cdn/latest/
          cp dist/socky.min.js.map cdn/latest/
          cp dist/socky.js cdn/latest/
          cp dist/socky.js.map cdn/latest/
          cp dist/socky.esm.js cdn/latest/
          cp dist/socky.esm.js.map cdn/latest/

      - name: Create README for CDN usage
        run: |
          cat > cdn/README.md << 'EOF'
          # Socky CDN Files

          This directory contains CDN-ready builds of Socky.js for use with jsDelivr.

          ## Usage

          ### Via jsDelivr CDN

          **Latest version:**
          ```html
          <!-- Minified -->
          <script src="https://cdn.jsdelivr.net/gh/bilte-co/socky-js@release/cdn/latest/socky.min.js"></script>

          <!-- Unminified -->
          <script src="https://cdn.jsdelivr.net/gh/bilte-co/socky-js@release/cdn/latest/socky.js"></script>

          <!-- ES Module -->
          <script type="module">
            import { Socky } from 'https://cdn.jsdelivr.net/gh/bilte-co/socky-js@release/cdn/latest/socky.esm.js';
          </script>
          ```

          **Specific version (v${{ steps.version.outputs.VERSION }}):**
          ```html
          <!-- Minified -->
          <script src="https://cdn.jsdelivr.net/gh/bilte-co/socky-js@release/cdn/v${{ steps.version.outputs.VERSION }}/socky.min.js"></script>

          <!-- Unminified -->
          <script src="https://cdn.jsdelivr.net/gh/bilte-co/socky-js@release/cdn/v${{ steps.version.outputs.VERSION }}/socky.js"></script>

          <!-- ES Module -->
          <script type="module">
            import { Socky } from 'https://cdn.jsdelivr.net/gh/bilte-co/socky-js@release/cdn/v${{ steps.version.outputs.VERSION }}/socky.esm.js';
          </script>
          ```

          ### Usage Example

          ```html
          <script src="https://cdn.jsdelivr.net/gh/bilte-co/socky-js@release/cdn/latest/socky.min.js"></script>
          <script>
            const socky = new Socky({
              apiKey: 'your-api-key'
            });

            // Use the API
            socky.locations.search('NYC').then(console.log);
          </script>
          ```
          EOF

      - name: Deploy to release branch
        run: |
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "GitHub Actions"
          git checkout --orphan release
          git rm -rf .
          mv cdn/* .
          git add .
          git commit -m "Release v${{ steps.version.outputs.VERSION }}"
          git push --force origin release

  create-github-release:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    permissions:
      contents: write
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release v${{ steps.version.outputs.VERSION }}
          body: |
            ## CDN Usage

            ```html
            <script src="https://cdn.jsdelivr.net/gh/bilte-co/socky-js@release/cdn/v${{ steps.version.outputs.VERSION }}/socky.min.js"></script>
            ```

            Or use the latest version:
            ```html
            <script src="https://cdn.jsdelivr.net/gh/bilte-co/socky-js@release/cdn/latest/socky.min.js"></script>
            ```
          draft: false
          prerelease: false
