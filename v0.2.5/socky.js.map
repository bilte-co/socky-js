{
  "version": 3,
  "sources": ["lib/util.ts", "lib/locations.ts", "lib/routes.ts", "lib/paginate.ts", "lib/stations.ts", "index.ts"],
  "sourcesContent": [
    "/**\n * Encodes latitude and longitude into a base64 string.\n *\n * The encoding uses 16 bytes: 8 for latitude and 8 for longitude.\n * The output is URL-safe, replacing '+' with '-', '/' with '_', and removing padding.\n *\n * @param lat\n * @param lng\n * @returns A base64 encoded string representing the latitude and longitude.\n */\nexport function encodeLatLng(lat: number, lng: number): string {\n\tconst buffer = new ArrayBuffer(16);\n\tconst view = new DataView(buffer);\n\n\tview.setFloat64(0, lat); // 8 bytes for latitude\n\tview.setFloat64(8, lng); // 8 bytes for longitude\n\n\t// Convert buffer to base64\n\tlet binary = \"\";\n\tfor (let i = 0; i < 16; i++) {\n\t\tbinary += String.fromCharCode(view.getUint8(i));\n\t}\n\n\t// Standard base64, then make it URL-safe\n\treturn btoa(binary)\n\t\t.replace(/\\+/g, \"-\")\n\t\t.replace(/\\//g, \"_\")\n\t\t.replace(/=+$/, \"\"); // Remove padding\n}\n\n/**\n * Decodes a base64 encoded string representing latitude and longitude.\n * The input should be URL-safe, with '-' replacing '+', '_' replacing '/', and no padding.\n *\n * @param encoded - A base64 encoded string representing latitude and longitude.\n * @returns A tuple containing the latitude and longitude as numbers.\n */\nexport function decodeLatLng(encoded: string): [number, number] {\n\t// Restore padding\n\tconst padded = encoded + \"===\".slice((encoded.length + 3) % 4);\n\n\t// Make base64 from URL-safe\n\tconst base64 = padded.replace(/-/g, \"+\").replace(/_/g, \"/\");\n\n\tconst binary = atob(base64);\n\tconst buffer = new ArrayBuffer(16);\n\tconst view = new DataView(buffer);\n\n\tfor (let i = 0; i < 16; i++) {\n\t\tview.setUint8(i, binary.charCodeAt(i));\n\t}\n\n\tconst lat = view.getFloat64(0);\n\tconst lon = view.getFloat64(8);\n\treturn [lat, lon];\n}\n",
    "import { encodeLatLng } from \"@lib/util\";\nimport type { LocationInfoResponse } from \"socky/types\";\n\nexport function apiLocations(request: typeof fetch) {\n  return {\n    async get(lat: number, lng: number): Promise<LocationInfoResponse> {\n      const encoded = encodeLatLng(lat, lng);\n      const res = await request(`/locations/${encoded}`);\n      if (!res.ok) {\n        throw new Error(`Failed to fetch location info: ${res.statusText}`);\n      }\n      return res.json();\n    },\n  };\n}\n",
    "import type { RouteInfoResponse } from \"socky/types\";\n\nexport function apiRoutes(request: typeof fetch) {\n  return {\n    async get(from: string, to: string): Promise<RouteInfoResponse> {\n      const res = await request(`/routes/${from}/${to}`);\n      if (!res.ok) {\n        throw new Error(`Failed to fetch route info: ${res.statusText}`);\n      }\n      return res.json();\n    },\n  };\n}\n",
    "import type { PaginatedResponse } from \"socky/types\";\n\nexport async function* paginate<T>(\n  fetchPage: (cursor?: string, limit?: number) => Promise<PaginatedResponse<T>>,\n  pageLimit?: number,\n): AsyncGenerator<T[], void, unknown> {\n  let cursor: string | undefined;\n  const limit: number | undefined = 20;\n  let pageCount = 0;\n\n  while (true) {\n    const page = await fetchPage(cursor, limit);\n    yield page.data;\n\n    cursor = page.next_cursor;\n    pageCount++;\n\n    if (!cursor || (pageLimit && pageCount >= pageLimit)) {\n      break;\n    }\n  }\n}\n",
    "import { paginate } from \"@lib/paginate\";\n\nimport type {\n  PaginatedResponse,\n  Station,\n  StationInfoResponse,\n  StationListResponse,\n  StationNearReq,\n} from \"socky/types\";\n\nexport function apiStations(request: typeof fetch) {\n  return {\n    async get(code: string): Promise<StationInfoResponse> {\n      const res = await request(`/stations/${code}`);\n      if (!res.ok) {\n        throw new Error(`Failed to fetch station info: ${res.statusText}`);\n      }\n      return res.json();\n    },\n\n    async list(\n      cursor?: string,\n      limit?: number,\n    ): Promise<PaginatedResponse<Station>> {\n      const basePath = \"/stations\";\n      const params = new URLSearchParams();\n\n      if (cursor) params.set(\"cursor\", cursor);\n      if (limit) params.set(\"limit\", limit.toString());\n\n      const url = `${basePath}?${params.toString()}`;\n\n      const res = await request(url);\n      if (!res.ok) throw new Error(`Failed to list stations`);\n\n      return res.json();\n    },\n\n    async search(query: string): Promise<StationListResponse> {\n      const basePath = \"/stations/search\";\n      const params = new URLSearchParams();\n\n      if (query) params.set(\"q\", query);\n\n      const url = `${basePath}?${params.toString()}`;\n\n      const res = await request(url);\n      if (!res.ok) throw new Error(`Failed to search stations`);\n\n      return res.json();\n    },\n\n    async proximity(query: StationNearReq): Promise<StationListResponse> {\n      const basePath = \"/stations/proximity\";\n      const params = new URLSearchParams();\n\n      if (query.latitude) params.set(\"lat\", query.latitude.toString());\n      if (query.longitude) params.set(\"lng\", query.longitude.toString());\n      if (query.distance) params.set(\"distance\", query.distance.toString());\n      if (query.unit) params.set(\"unit\", query.unit);\n\n      const url = `${basePath}?${params.toString()}`;\n\n      const res = await request(url);\n      if (!res.ok) throw new Error(`Failed to search nearby stations`);\n\n      return res.json();\n    },\n\n    async near(\n      code: string,\n      query: StationNearReq,\n    ): Promise<StationListResponse> {\n      const basePath = `/stations/${code}/near`;\n      const params = new URLSearchParams();\n\n      if (query.distance) params.set(\"distance\", query.distance.toString());\n      if (query.unit) params.set(\"unit\", query.unit);\n\n      const url = `${basePath}?${params.toString()}`;\n      const res = await request(url);\n      if (!res.ok) throw new Error(`Failed to search stations`);\n\n      return res.json();\n    },\n\n    paginate: (request: typeof fetch) =>\n      paginate<Station>(\n        (cursor?: string | undefined, limit?: number | undefined) => {\n          return apiStations(request).list(cursor, limit); // call list repeatedly\n        },\n      ),\n  };\n}\n",
    "import { apiLocations } from \"@lib/locations\";\nimport { apiRoutes } from \"@lib/routes\";\nimport { apiStations } from \"@lib/stations\";\n\nimport type { SockyOptions } from \"socky/types\";\n\nexport class Socky {\n  private readonly apiKey: string;\n  private readonly baseUrl: string;\n  private readonly version: string;\n  private readonly request: typeof fetch;\n\n  public readonly locations: ReturnType<typeof apiLocations>;\n  public readonly routes: ReturnType<typeof apiRoutes>;\n  public readonly stations: ReturnType<typeof apiStations>;\n\n  constructor(opts: SockyOptions) {\n    if (!opts.apiKey) {\n      throw new Error(\"API key is required\");\n    }\n    this.apiKey = opts.apiKey;\n\n    if (opts.baseUrl && !opts.baseUrl.endsWith(\"/\")) {\n      opts.baseUrl += \"/\";\n    }\n    this.baseUrl = opts.baseUrl || \"https://api.socky.flights/\";\n\n    this.version = opts.version || \"v1\";\n\n    this.request = (path, options = {}) => {\n      const url = new URL(`${this.baseUrl}${this.version}${path}`);\n\n      return fetch(url, {\n        ...options,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: `Bearer ${this.apiKey}`,\n          ...(options.headers || {}),\n        },\n      });\n    };\n\n    this.locations = apiLocations(this.request);\n    this.routes = apiRoutes(this.request);\n    this.stations = apiStations(this.request);\n  }\n}\n\nif (typeof window !== \"undefined\") {\n  // biome-ignore lint/suspicious/noExplicitAny: Allow global access to Socky\n  (window as any).Socky = Socky;\n}\n"
  ],
  "mappings": "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",
  "debugId": "4B0A4CD3ADEB6A2E64756E2164756E21",
  "names": []
}