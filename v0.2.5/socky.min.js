(()=>{var{defineProperty:i,getOwnPropertyNames:w,getOwnPropertyDescriptor:R}=Object,g=Object.prototype.hasOwnProperty;var m=new WeakMap,$=(o)=>{var t=m.get(o),n;if(t)return t;if(t=i({},"__esModule",{value:!0}),o&&typeof o==="object"||typeof o==="function")w(o).map((s)=>!g.call(t,s)&&i(t,s,{get:()=>o[s],enumerable:!(n=R(o,s))||n.enumerable}));return m.set(o,t),t};var p=(o,t)=>{for(var n in t)i(o,n,{get:t[n],enumerable:!0,configurable:!0,set:(s)=>t[n]=()=>s})};var y={};p(y,{Socky:()=>f});function h(o,t){let n=new ArrayBuffer(16),s=new DataView(n);s.setFloat64(0,o),s.setFloat64(8,t);let r="";for(let e=0;e<16;e++)r+=String.fromCharCode(s.getUint8(e));return btoa(r).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}function P(o){return{async get(t,n){let s=h(t,n),r=await o(`/locations/${s}`);if(!r.ok)throw new Error(`Failed to fetch location info: ${r.statusText}`);return r.json()}}}function S(o){return{async get(t,n){let s=await o(`/routes/${t}/${n}`);if(!s.ok)throw new Error(`Failed to fetch route info: ${s.statusText}`);return s.json()}}}async function*u(o,t){let n,s=20,r=0;while(!0){let e=await o(n,20);if(yield e.data,n=e.next_cursor,r++,!n||t&&r>=t)break}}function c(o){return{async get(t){let n=await o(`/stations/${t}`);if(!n.ok)throw new Error(`Failed to fetch station info: ${n.statusText}`);return n.json()},async list(t,n){let r=new URLSearchParams;if(t)r.set("cursor",t);if(n)r.set("limit",n.toString());let e=`/stations?${r.toString()}`,a=await o(e);if(!a.ok)throw new Error("Failed to list stations");return a.json()},async search(t){let s=new URLSearchParams;if(t)s.set("q",t);let r=`/stations/search?${s.toString()}`,e=await o(r);if(!e.ok)throw new Error("Failed to search stations");return e.json()},async proximity(t){let s=new URLSearchParams;if(t.latitude)s.set("lat",t.latitude.toString());if(t.longitude)s.set("lng",t.longitude.toString());if(t.distance)s.set("distance",t.distance.toString());if(t.unit)s.set("unit",t.unit);let r=`/stations/proximity?${s.toString()}`,e=await o(r);if(!e.ok)throw new Error("Failed to search nearby stations");return e.json()},async near(t,n){let s=`/stations/${t}/near`,r=new URLSearchParams;if(n.distance)r.set("distance",n.distance.toString());if(n.unit)r.set("unit",n.unit);let e=`${s}?${r.toString()}`,a=await o(e);if(!a.ok)throw new Error("Failed to search stations");return a.json()},paginate:(t)=>u((n,s)=>{return c(t).list(n,s)})}}class f{apiKey;baseUrl;version;request;locations;routes;stations;constructor(o){if(!o.apiKey)throw new Error("API key is required");if(this.apiKey=o.apiKey,o.baseUrl&&!o.baseUrl.endsWith("/"))o.baseUrl+="/";this.baseUrl=o.baseUrl||"https://api.socky.flights/",this.version=o.version||"v1",this.request=(t,n={})=>{let s=new URL(`${this.baseUrl}${this.version}${t}`);return fetch(s,{...n,headers:{"Content-Type":"application/json",Accept:"application/json",Authorization:`Bearer ${this.apiKey}`,...n.headers||{}}})},this.locations=P(this.request),this.routes=S(this.request),this.stations=c(this.request)}}if(typeof window!=="undefined")window.Socky=f;})();

//# debugId=A916F69BB58774E264756E2164756E21
//# sourceMappingURL=socky.min.js.map
