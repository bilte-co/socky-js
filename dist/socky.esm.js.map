{
  "version": 3,
  "sources": ["lib/util.ts", "lib/locations.ts", "lib/routes.ts", "lib/paginate.ts", "lib/stations.ts", "index.ts"],
  "sourcesContent": [
    "/**\n * Encodes latitude and longitude into a base64 string.\n *\n * The encoding uses 16 bytes: 8 for latitude and 8 for longitude.\n * The output is URL-safe, replacing '+' with '-', '/' with '_', and removing padding.\n *\n * @param lat\n * @param lng\n * @returns A base64 encoded string representing the latitude and longitude.\n */\nexport function encodeLatLng(lat: number, lng: number): string {\n\tconst buffer = new ArrayBuffer(16);\n\tconst view = new DataView(buffer);\n\n\tview.setFloat64(0, lat); // 8 bytes for latitude\n\tview.setFloat64(8, lng); // 8 bytes for longitude\n\n\t// Convert buffer to base64\n\tlet binary = \"\";\n\tfor (let i = 0; i < 16; i++) {\n\t\tbinary += String.fromCharCode(view.getUint8(i));\n\t}\n\n\t// Standard base64, then make it URL-safe\n\treturn btoa(binary)\n\t\t.replace(/\\+/g, \"-\")\n\t\t.replace(/\\//g, \"_\")\n\t\t.replace(/=+$/, \"\"); // Remove padding\n}\n\n/**\n * Decodes a base64 encoded string representing latitude and longitude.\n * The input should be URL-safe, with '-' replacing '+', '_' replacing '/', and no padding.\n *\n * @param encoded - A base64 encoded string representing latitude and longitude.\n * @returns A tuple containing the latitude and longitude as numbers.\n */\nexport function decodeLatLng(encoded: string): [number, number] {\n\t// Restore padding\n\tconst padded = encoded + \"===\".slice((encoded.length + 3) % 4);\n\n\t// Make base64 from URL-safe\n\tconst base64 = padded.replace(/-/g, \"+\").replace(/_/g, \"/\");\n\n\tconst binary = atob(base64);\n\tconst buffer = new ArrayBuffer(16);\n\tconst view = new DataView(buffer);\n\n\tfor (let i = 0; i < 16; i++) {\n\t\tview.setUint8(i, binary.charCodeAt(i));\n\t}\n\n\tconst lat = view.getFloat64(0);\n\tconst lon = view.getFloat64(8);\n\treturn [lat, lon];\n}\n",
    "import { encodeLatLng } from \"@lib/util\";\nimport type { LocationInfoResponse } from \"socky/types\";\n\nexport function apiLocations(request: typeof fetch) {\n  return {\n    async get(lat: number, lng: number): Promise<LocationInfoResponse> {\n      const encoded = encodeLatLng(lat, lng);\n      const res = await request(`/locations/${encoded}`);\n      if (!res.ok) {\n        throw new Error(`Failed to fetch location info: ${res.statusText}`);\n      }\n      return res.json();\n    },\n  };\n}\n",
    "import type { RouteInfoResponse } from \"socky/types\";\n\nexport function apiRoutes(request: typeof fetch) {\n  return {\n    async get(from: string, to: string): Promise<RouteInfoResponse> {\n      const res = await request(`/routes/${from}/${to}`);\n      if (!res.ok) {\n        throw new Error(`Failed to fetch route info: ${res.statusText}`);\n      }\n      return res.json();\n    },\n  };\n}\n",
    "import type { PaginatedResponse } from \"socky/types\";\n\nexport async function* paginate<T>(\n  fetchPage: (cursor?: string, limit?: number) => Promise<PaginatedResponse<T>>,\n  pageLimit?: number,\n): AsyncGenerator<T[], void, unknown> {\n  let cursor: string | undefined;\n  const limit: number | undefined = 20;\n  let pageCount = 0;\n\n  while (true) {\n    const page = await fetchPage(cursor, limit);\n    yield page.data;\n\n    cursor = page.next_cursor;\n    pageCount++;\n\n    if (!cursor || (pageLimit && pageCount >= pageLimit)) {\n      break;\n    }\n  }\n}\n",
    "import { paginate } from \"@lib/paginate\";\n\nimport type {\n  PaginatedResponse,\n  Station,\n  StationInfoResponse,\n  StationListResponse,\n  StationNearReq,\n} from \"socky/types\";\n\nexport function apiStations(request: typeof fetch) {\n  return {\n    async get(code: string): Promise<StationInfoResponse> {\n      const res = await request(`/stations/${code}`);\n      if (!res.ok) {\n        throw new Error(`Failed to fetch station info: ${res.statusText}`);\n      }\n      return res.json();\n    },\n\n    async list(\n      cursor?: string,\n      limit?: number,\n    ): Promise<PaginatedResponse<Station>> {\n      const basePath = \"/stations\";\n      const params = new URLSearchParams();\n\n      if (cursor) params.set(\"cursor\", cursor);\n      if (limit) params.set(\"limit\", limit.toString());\n\n      const url = `${basePath}?${params.toString()}`;\n\n      const res = await request(url);\n      if (!res.ok) throw new Error(`Failed to list stations`);\n\n      return res.json();\n    },\n\n    async search(query: string): Promise<StationListResponse> {\n      const basePath = \"/stations/search\";\n      const params = new URLSearchParams();\n\n      if (query) params.set(\"q\", query);\n\n      const url = `${basePath}?${params.toString()}`;\n\n      const res = await request(url);\n      if (!res.ok) throw new Error(`Failed to search stations`);\n\n      return res.json();\n    },\n\n    async proximity(query: StationNearReq): Promise<StationListResponse> {\n      const basePath = \"/stations/proximity\";\n      const params = new URLSearchParams();\n\n      if (query.latitude) params.set(\"lat\", query.latitude.toString());\n      if (query.longitude) params.set(\"lng\", query.longitude.toString());\n      if (query.distance) params.set(\"distance\", query.distance.toString());\n      if (query.unit) params.set(\"unit\", query.unit);\n\n      const url = `${basePath}?${params.toString()}`;\n\n      const res = await request(url);\n      if (!res.ok) throw new Error(`Failed to search nearby stations`);\n\n      return res.json();\n    },\n\n    async near(\n      code: string,\n      query: StationNearReq,\n    ): Promise<StationListResponse> {\n      const basePath = `/stations/${code}/near`;\n      const params = new URLSearchParams();\n\n      if (query.distance) params.set(\"distance\", query.distance.toString());\n      if (query.unit) params.set(\"unit\", query.unit);\n\n      const url = `${basePath}?${params.toString()}`;\n      const res = await request(url);\n      if (!res.ok) throw new Error(`Failed to search stations`);\n\n      return res.json();\n    },\n\n    paginate: (request: typeof fetch) =>\n      paginate<Station>(\n        (cursor?: string | undefined, limit?: number | undefined) => {\n          return apiStations(request).list(cursor, limit); // call list repeatedly\n        },\n      ),\n  };\n}\n",
    "import { apiLocations } from \"@lib/locations\";\nimport { apiRoutes } from \"@lib/routes\";\nimport { apiStations } from \"@lib/stations\";\n\nimport type { SockyOptions } from \"socky/types\";\n\nexport class Socky {\n  private readonly apiKey: string;\n  private readonly baseUrl: string;\n  private readonly version: string;\n  private readonly request: typeof fetch;\n\n  public readonly locations: ReturnType<typeof apiLocations>;\n  public readonly routes: ReturnType<typeof apiRoutes>;\n  public readonly stations: ReturnType<typeof apiStations>;\n\n  constructor(opts: SockyOptions) {\n    if (!opts.apiKey) {\n      throw new Error(\"API key is required\");\n    }\n    this.apiKey = opts.apiKey;\n\n    if (opts.baseUrl && !opts.baseUrl.endsWith(\"/\")) {\n      opts.baseUrl += \"/\";\n    }\n    this.baseUrl = opts.baseUrl || \"https://api.socky.flights/\";\n\n    this.version = opts.version || \"v1\";\n\n    this.request = (path, options = {}) => {\n      const url = new URL(`${this.baseUrl}${this.version}${path}`);\n\n      return fetch(url, {\n        ...options,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: `Bearer ${this.apiKey}`,\n          ...(options.headers || {}),\n        },\n      });\n    };\n\n    this.locations = apiLocations(this.request);\n    this.routes = apiRoutes(this.request);\n    this.stations = apiStations(this.request);\n  }\n}\n\nif (typeof window !== \"undefined\") {\n  // biome-ignore lint/suspicious/noExplicitAny: Allow global access to Socky\n  (window as any).Socky = Socky;\n}\n"
  ],
  "mappings": "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",
  "debugId": "6B1A6FAA21685E7964756E2164756E21",
  "names": []
}